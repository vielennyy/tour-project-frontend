"use strict";(self.webpackChunk_cromwell_root=self.webpackChunk_cromwell_root||[]).push([[2132],{2132:function(e,n,t){t.r(n);var r=t(8516);n.default=r.u1},2785:function(e,n){var t=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)};n.Z=t},8516:function(e,n,t){t.d(n,{EZ:function(){return d},av:function(){return h},km:function(){return b},_o:function(){return w},kH:function(){return g},u1:function(){return m},HS:function(){return y}});var r=t(2785),a=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},o=t(2616),i=t(8909),u=t(9659),c=t(8251),s=t(6506),f=t(701),l=2147483647,p=-2147483648,w=new f.n2({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize:function(e){var n=v(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!a(t))throw new s._("Int cannot represent non-integer value: ".concat((0,o.Z)(n)));if(t>l||t<p)throw new s._("Int cannot represent non 32-bit signed integer value: "+(0,o.Z)(n));return t},parseValue:function(e){if(!a(e))throw new s._("Int cannot represent non-integer value: ".concat((0,o.Z)(e)));if(e>l||e<p)throw new s._("Int cannot represent non 32-bit signed integer value: ".concat(e));return e},parseLiteral:function(e){if(e.kind!==u.h.INT)throw new s._("Int cannot represent non-integer value: ".concat((0,c.S)(e)),e);var n=parseInt(e.value,10);if(n>l||n<p)throw new s._("Int cannot represent non 32-bit signed integer value: ".concat(e.value),e);return n}}),h=new f.n2({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize:function(e){var n=v(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!(0,r.Z)(t))throw new s._("Float cannot represent non numeric value: ".concat((0,o.Z)(n)));return t},parseValue:function(e){if(!(0,r.Z)(e))throw new s._("Float cannot represent non numeric value: ".concat((0,o.Z)(e)));return e},parseLiteral:function(e){if(e.kind!==u.h.FLOAT&&e.kind!==u.h.INT)throw new s._("Float cannot represent non numeric value: ".concat((0,c.S)(e)),e);return parseFloat(e.value)}});function v(e){if((0,i.Z)(e)){if("function"==typeof e.valueOf){var n=e.valueOf();if(!(0,i.Z)(n))return n}if("function"==typeof e.toJSON)return e.toJSON()}return e}var g=new f.n2({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize:function(e){var n=v(e);if("string"==typeof n)return n;if("boolean"==typeof n)return n?"true":"false";if((0,r.Z)(n))return n.toString();throw new s._("String cannot represent value: ".concat((0,o.Z)(e)))},parseValue:function(e){if("string"!=typeof e)throw new s._("String cannot represent a non string value: ".concat((0,o.Z)(e)));return e},parseLiteral:function(e){if(e.kind!==u.h.STRING)throw new s._("String cannot represent a non string value: ".concat((0,c.S)(e)),e);return e.value}}),d=new f.n2({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize:function(e){var n=v(e);if("boolean"==typeof n)return n;if((0,r.Z)(n))return 0!==n;throw new s._("Boolean cannot represent a non boolean value: ".concat((0,o.Z)(n)))},parseValue:function(e){if("boolean"!=typeof e)throw new s._("Boolean cannot represent a non boolean value: ".concat((0,o.Z)(e)));return e},parseLiteral:function(e){if(e.kind!==u.h.BOOLEAN)throw new s._("Boolean cannot represent a non boolean value: ".concat((0,c.S)(e)),e);return e.value}}),b=new f.n2({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:function(e){var n=v(e);if("string"==typeof n)return n;if(a(n))return String(n);throw new s._("ID cannot represent value: ".concat((0,o.Z)(e)))},parseValue:function(e){if("string"==typeof e)return e;if(a(e))return e.toString();throw new s._("ID cannot represent value: ".concat((0,o.Z)(e)))},parseLiteral:function(e){if(e.kind!==u.h.STRING&&e.kind!==u.h.INT)throw new s._("ID cannot represent a non-string and non-integer value: "+(0,c.S)(e),e);return e.value}}),y=Object.freeze([g,w,h,d,b]);function m(e){return y.some((function(n){var t=n.name;return e.name===t}))}}}]);